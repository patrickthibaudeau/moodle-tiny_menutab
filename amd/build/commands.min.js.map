{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["import {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {getCourseFormat} from './options';\nimport {\n    component,\n    buttonName,\n    icon,\n} from './common';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst addTab = (editor) => {\n    // Get the selected range.\n    const range = editor.selection.getRng();\n    const container = range.commonAncestorContainer;\n\n    // Check if the selection is within a text node.\n    if (container.nodeType === Node.TEXT_NODE) {\n        const parent = container.parentNode;\n\n        // Check if the parent is an <h2> tag.\n        if (parent && parent.nodeName === 'H2') {\n            // Replace the <h2> tag with its inner text.\n            const textNode = document.createTextNode(parent.textContent);\n            parent.replaceWith(textNode);\n        } else {\n            // Wrap the selected text in an <h2> tag.\n            const h2 = document.createElement('h2');\n            h2.textContent = range.toString();\n            range.deleteContents();\n            range.insertNode(h2);\n        }\n    }\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonImageText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('add_tab', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Get the course format options.\n        const courseFormat = getCourseFormat(editor);\n\n        if (courseFormat === 'menutab') {\n            // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n            editor.ui.registry.addIcon(icon, buttonImage.html);\n\n            // Register the lowercase Toolbar Button.\n            editor.ui.registry.addButton(buttonName, {\n                icon: icon,\n                tooltip: buttonImageText,\n                onAction: () => addTab(editor),\n            });\n\n            editor.ui.registry.addMenuItem('menutab_menuitem', {\n                icon: icon,\n                text: buttonImageText,\n                onAction: () => addTab(editor),\n            });\n        }\n    };\n};"],"names":["addTab","editor","range","selection","getRng","container","commonAncestorContainer","nodeType","Node","TEXT_NODE","parent","parentNode","nodeName","textNode","document","createTextNode","textContent","replaceWith","h2","createElement","toString","deleteContents","insertNode","_exports","getSetup","async","buttonImageText","buttonImage","Promise","all","getString","component","getButtonImage","getCourseFormat","ui","registry","addIcon","icon","html","addButton","buttonName","tooltip","onAction","addMenuItem","text"],"mappings":"mOAcA,MAAMA,OAAUC,SAEZ,MAAMC,MAAQD,OAAOE,UAAUC,SACzBC,UAAYH,MAAMI,wBAGxB,GAAID,UAAUE,WAAaC,KAAKC,UAAW,CACvC,MAAMC,OAASL,UAAUM,WAGzB,GAAID,QAA8B,OAApBA,OAAOE,SAAmB,CAEpC,MAAMC,SAAWC,SAASC,eAAeL,OAAOM,aAChDN,OAAOO,YAAYJ,SACvB,KAAO,CAEH,MAAMK,GAAKJ,SAASK,cAAc,MAClCD,GAAGF,YAAcd,MAAMkB,WACvBlB,MAAMmB,iBACNnB,MAAMoB,WAAWJ,GACrB,CACJ,GA0CFK,SAAAC,SA/BsBC,UACpB,MACIC,gBACAC,mBACMC,QAAQC,IAAI,EAClB,EAAAC,KAAAA,YAAU,UAAWC,QAAAA,YACrB,EAAAC,OAAAA,gBAAe,OAAQD,QAAAA,aAG3B,OAAQ9B,SAIiB,aAFA,EAAAgC,SAAeA,iBAAChC,UAIjCA,OAAOiC,GAAGC,SAASC,QAAQC,QAAAA,KAAMV,YAAYW,MAG7CrC,OAAOiC,GAAGC,SAASI,UAAUC,mBAAY,CACrCH,KAAMA,QAAIA,KACVI,QAASf,gBACTgB,SAAUA,IAAM1C,OAAOC,UAG3BA,OAAOiC,GAAGC,SAASQ,YAAY,mBAAoB,CAC/CN,KAAMA,QAAIA,KACVO,KAAMlB,gBACNgB,SAAUA,IAAM1C,OAAOC,UAE/B,CACH,CACH"}