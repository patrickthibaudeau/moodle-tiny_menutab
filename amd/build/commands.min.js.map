{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["import {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    buttonName,\n    icon,\n} from './common';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n/*const addTab = (editor) => {\n    // TODO: This would change the case of the html tags as well.\n    // But the TinyMCE editor should correct that automatically.\n    let selectedText = editor.selection.getContent();\n\n    // Add <h2> tags around the selected text.\n    editor.selection.setContent(`<h2>${selectedText}</h2>`);\n\n};*/\n\nconst addTab = (editor) => {\n    // Get the selected range.\n    const range = editor.selection.getRng();\n    const container = range.commonAncestorContainer;\n\n    // Check if the selection is within a text node.\n    if (container.nodeType === Node.TEXT_NODE) {\n        const parent = container.parentNode;\n\n        // Check if the parent is an <h2> tag.\n        if (parent && parent.nodeName === 'H2') {\n            // Replace the <h2> tag with its inner text.\n            const textNode = document.createTextNode(parent.textContent);\n            parent.replaceWith(textNode);\n        } else {\n            // Wrap the selected text in an <h2> tag.\n            const h2 = document.createElement('h2');\n            h2.textContent = range.toString();\n            range.deleteContents();\n            range.insertNode(h2);\n        }\n    }\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        buttonImageText,\n        buttonImage,\n    ] = await Promise.all([\n        getString('add_tab', component),\n        getButtonImage('icon', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        // Register the lowercase Toolbar Button.\n        editor.ui.registry.addButton(buttonName, {\n            icon: icon,\n            tooltip: buttonImageText,\n            onAction: () => addTab(editor),\n        });\n    };\n};"],"names":["async","buttonImageText","buttonImage","Promise","all","component","editor","ui","registry","addIcon","icon","html","addButton","buttonName","tooltip","onAction","range","selection","getRng","container","commonAncestorContainer","nodeType","Node","TEXT_NODE","parent","parentNode","nodeName","textNode","document","createTextNode","textContent","replaceWith","h2","createElement","toString","deleteContents","insertNode","addTab"],"mappings":"gOAsDwBA,gBAEhBC,gBACAC,mBACMC,QAAQC,IAAI,EAClB,mBAAU,UAAWC,oBACrB,yBAAe,OAAQA,4BAGnBC,SAEJA,OAAOC,GAAGC,SAASC,QAAQC,aAAMR,YAAYS,MAG7CL,OAAOC,GAAGC,SAASI,UAAUC,mBAAY,CACrCH,KAAMA,aACNI,QAASb,gBACTc,SAAU,IAjDNT,CAAAA,eAENU,MAAQV,OAAOW,UAAUC,SACzBC,UAAYH,MAAMI,2BAGpBD,UAAUE,WAAaC,KAAKC,UAAW,OACjCC,OAASL,UAAUM,cAGrBD,QAA8B,OAApBA,OAAOE,SAAmB,OAE9BC,SAAWC,SAASC,eAAeL,OAAOM,aAChDN,OAAOO,YAAYJ,cAChB,OAEGK,GAAKJ,SAASK,cAAc,MAClCD,GAAGF,YAAcd,MAAMkB,WACvBlB,MAAMmB,iBACNnB,MAAMoB,WAAWJ,OA8BDK,CAAO/B"}